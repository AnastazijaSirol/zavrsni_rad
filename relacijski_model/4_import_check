import unittest
import pandas as pd
import sqlalchemy
from pandas.testing import assert_frame_equal
from sqlalchemy.sql import text

class TestDatabase(unittest.TestCase):
    def setUp(self):
        self.engine = sqlalchemy.create_engine('mysql+pymysql://root:root@localhost:3306/dw')
        self.connection = self.engine.connect()

        self.df = pd.read_csv("C:/Users/Pc/Desktop/6_semestar/SRP/Koraci/Checkpoint_2/synthetic_fraud_dataset_PROCESSED.csv")

        query = text("""
            SELECT 
                t.id AS transaction_id,
                t.transaction_amount,
                t.transaction_type,
                t.timestamp,
                t.ip_address_flag,
                t.transaction_distance,
                t.risk_score,
                t.is_weekend,
                t.fraud_label,
                t.account_balance,
                t.daily_transaction_count,
                t.avg_transaction_amount_7d,
                t.failed_transaction_count_7d,
                t.previous_fraudulent_activity,

                c.id AS card_id,
                c.card_type,
                c.card_age,

                u.id AS user_id,
                u.age,
                u.gender,

                d.id AS device_id,
                d.device_type,

                l.id AS location_id,
                l.name AS location,
                l.population,

                s.id AS state_id,
                s.name AS state_name,

                a.id AS authentication_id,
                a.authentication_method,

                m.id AS merchant_id,
                m.merchant_category

            FROM transaction t
            LEFT JOIN card c ON t.card_fk = c.id
            LEFT JOIN user u ON c.user_fk = u.id
            LEFT JOIN device d ON t.device_fk = d.id
            LEFT JOIN location l ON t.location_fk = l.id
            LEFT JOIN state s ON l.state_fk = s.id
            LEFT JOIN authentication a ON t.authentication_fk = a.id
            LEFT JOIN merchant m ON t.merchant_fk = m.id;
        """)
        result = self.connection.execute(query)
        self.db_df = pd.DataFrame(result.fetchall())
        self.db_df.columns = result.keys()

    def test_columns(self):
        expected_columns = [
            'transaction_id', 'user_id', 'transaction_amount', 'transaction_type', 'timestamp', 'account_balance', 
            'device_type', 'ip_address_flag', 'location', 'merchant_category', 'card_type', 'card_age', 
            'authentication_method', 'transaction_distance', 'risk_score', 'is_weekend', 'fraud_label',
            'daily_transaction_count', 'avg_transaction_amount_7d', 'failed_transaction_count_7d',
            'previous_fraudulent_activity'
        ]

        df_filtered_columns = [col for col in self.df.columns if col in expected_columns]
        db_filtered_columns = [col for col in self.db_df.columns if col in expected_columns]

        self.assertCountEqual(df_filtered_columns, db_filtered_columns)

    def test_dataframes(self):
        expected_columns = [
            'transaction_id', 'user_id', 'transaction_amount', 'transaction_type', 'timestamp', 'account_balance', 
            'device_type', 'ip_address_flag', 'location', 'merchant_category', 'card_type', 'card_age', 
            'authentication_method', 'transaction_distance', 'risk_score', 'is_weekend', 'fraud_label',
            'daily_transaction_count', 'avg_transaction_amount_7d', 'failed_transaction_count_7d',
            'previous_fraudulent_activity'
        ]

        common_columns = list(set(expected_columns) & set(self.df.columns) & set(self.db_df.columns))
        
        df_filtered = self.df[common_columns].sort_values(by="transaction_id").reset_index(drop=True)
        db_df_filtered = self.db_df[common_columns].sort_values(by="transaction_id").reset_index(drop=True)

        numeric_columns = ['transaction_amount', 'account_balance', 'transaction_distance']
        
        for col in numeric_columns:
            if col in df_filtered.columns:
                df_filtered[col] = df_filtered[col].astype(float).round(2)
                db_df_filtered[col] = db_df_filtered[col].astype(float).round(2)

        if "timestamp" in df_filtered.columns:
            df_filtered["timestamp"] = pd.to_datetime(df_filtered["timestamp"], errors='coerce')
            db_df_filtered["timestamp"] = pd.to_datetime(db_df_filtered["timestamp"], errors='coerce')

        try:
            assert_frame_equal(df_filtered, db_df_filtered, check_dtype=False, rtol=1e-3)
        except AssertionError:
            print("Razlike izmeÄ‘u CSV-a i baze podataka:")
            print(df_filtered.compare(db_df_filtered))
            raise

    def tearDown(self):
        self.connection.close()

if __name__ == '__main__':
    unittest.main()
